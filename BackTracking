1. Permutations:
              [1,2,3] different permutations with out dulicate 
              1.             2              3
            2.  3.         1.   3.      1.      2
          3.     2.      3.      1.    2.        1
          
          for(int i=0;i<nums.length;i++){
            if(path.contains(nums[i])) continue;
              path.add(nums[i]);
              helper(path,res)
              path.remove(path.size()-1);
          }
      when the size of path equal to nums.length, return
      
2. Permutations II:
          sort the array
          [1,1,2] contains duplicate elements but we need to avoid same permutations in output.
          We use boolean array to record the used status of each element.
          when used[i] shows that you have used this element, then continue;
          other situation is when you have use the 1st 1 ,when at 2nd 1's loop, you do not need to do it again. continue;
          
          for(int i=0;i<nums.length;i++){
            if(used[i]==true || i>0 && nums[i]==nums[i-1] && used[i-1]==false) 
                  continue;
            path.add(nums[i]);
            used[i]=true;
            helper(nums,res,path,used);
            used[i]=false;
            path.remove(path.size()-1);
            }
2.变种： Next Permutation:O(n)
            This is not a classic permutation question, just array
            Find the first pair which nums[i]<nums[i+1]
            then find the first number from the end of the array which nums[index]>nums[i],swap
            then reverse the array from the i+1 to the end
            
3. Combinations:
            need take care of same duplicate result in the output
            if you use start index,then you can make sure there will be no search back
4. Combinations sum:
            sort the array first
            need take care of same duplicate result-> i>0 && nums[i]==nums[i-1] continue
            use start index to take care of the search back 
5. Combinations sum II:
            sort the array first
            "find all unique combinations" = use start index to take care of the search back
            need take care of same duplicate result
            "Each number in candidates may only be used once in the combination."
            == We use boolean array to record the used status of each element 
            when used[i] shows that you have used this element, then continue;
            
5.* Combination Sum IV:
            Given an integer array with all positive numbers and no duplicates, find the number of possible combinations         that add up to a positive integer target.
            Then it is the same as need unique combinations
            But this question needs Dynamic Programming!
            think as the last time, need one more element to be the target, then this element can be anyone
            then we can also use memorization to record pre calculation result.
            
        Follow up:
        if negative elements exist, we need to limit the length of the combination result.
        
        
6. Subset:
            each element can have the choice of add or not add
            so:
            for each level, you have two parts:
                          path.add(null);
                          helper(nums,res,path,start+1);
                          path.remove(path.size()-1);

                          path.add(nums[start]);
                          helper(nums,res,path,start+1);
                          path.remove(path.size()-1);
                          
For all classic backtracking problems:

    Conclusion is follow:
                1. subsets: sort is not necessary. add each path and use start index to make sure not forward back
                
    public List<List<Integer>> subsetsWithDup(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    //Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
} 
                2. Combinations: make sure whether can use the same element or not to decide whether i/i+1
                
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, target, 0);
    return list;
    
    }

    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
    if(remain < 0) return;
    else if(remain == 0) list.add(new ArrayList<>(tempList));
    else{
        for(int i = start; i < nums.length; i++){
            if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, remain - nums[i], i + 1);
            tempList.remove(tempList.size() - 1); 
        }
    }
} 
                3. permutations: no need start index because output all the elements in the nums
                
public List<List<Integer>> permuteUnique(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, new boolean[nums.length]);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, boolean [] used){
    if(tempList.size() == nums.length){
        list.add(new ArrayList<>(tempList));
    } else{
        for(int i = 0; i < nums.length; i++){
            if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue; // contains duplicate
            used[i] = true; 
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, used);
            used[i] = false; 
            tempList.remove(tempList.size() - 1);
        }
    }
}
                
7. Palindrome partitioning:
          partition means separate it into parts, we can use backtrack to find subsets
          only addings is to check whether it is a palindrome
          
8. Generate Parentheses:
          classic backtracking problem and can save the step of check it validation. just check the number of close and open bracket
     
9.Increasing Subsequences:
    Idea is the same with other backtracking problem, just make sure the increasing order. And need the hashset to avoid duplicate.
    
    
          
          
