一. Find number missing:
  
    1. Find All Numbers Disappeared in an Array: O(n),O(1)space
      because the array is from 1~size of num, then i can use this, we iterate through the input array and mark elements as negative using nums[nums[i] -1] = -nums[nums[i]-1]. In this way all the numbers that we have seen will be marked as negative. In the second iteration, if a value is not marked as negative, it implies we have never seen that index before, so just add it to the return list.
      
二. Sort:
    1. wiggle sort:O(n)
      Idea is that using swap, 
                  If i is odd, then nums[i] >= nums[i - 1];
                  If i is even, then nums[i] <= nums[i - 1].
      use swap when not meeting the two conditions
    2. wiggle sort II:O(n)
       Idea is that sort the whole array and first half will be in the even positions, larger half will be in the odd positions.
       
    3.Largest Number:O(nlogn)
        Idea is that we build a new comparator to sort the two strings into the way it can become a bigger string,then sort the string array.
        
三. In-place problem:
    1. Game of Life:O(MN)
      Idea is that you need to calculate the circling 8 element to see how many lives, but inplace update will change it, then think about when the live node changed, make it a number when later you can recognize that a live node before. then use 1,2,3 which 1,3 represents live node and 2 represent dead node. because later can mod by 2. then 2 represent the node before is live node but changed to dead node, 3 represent the node before is dead node but changed to live node.
    
    2. Flipping an Image:O(n^2)
      Idea is that you can do it inplace, first swap each row in the matrix, then invert it at the last move.
    
    3. RLE Iterator:O(n) for next
      Idea is that we search in place, no need extra memory space, we have two pointers: one for keep track the index, another is to keep track of the number of the needed element left. if the number left+it want >all it get, then move on to the next available elements.
     
    4. Circular Array Loop:O(n)time+O(1)space
      Idea is that we start from each index and find whether there will lead to a cycle loop for this index, we change the already been index to 0. when occur that 0 in the next loop then check whether the current index == i then means we go back to where we begin.
      Attention we need a 
                if (nums[cur] == 0) continue; because there is no 0 exists at the begining, then when occur a zero, it must be the loop before.Or it will always be true
      Also what is tricky part is how to deal with position index and negative index?
        int index = nums[cur] > 0 ? ((cur + nums[cur]) % len) : (len - Math.abs((cur + nums[cur]) % len)) % len;
    
    5. Battleships in a Board:O(n)
      Idea is because the battleship can only be put horizontal or vertical. then for each cell with 'X', check whether there are 'X' in the cell left or the cell up. If so, then continue, if not then count++;
    
    6. First Missing Positive:O(n)
      Idea is that we use two pass the input array, first pass, we put each num into its position. second pass, we check whether the position has the number on it.
      
    
四. Can solve only in one pass:
    1.  Largest Number At Least Twice of Others:O(N)
      Idea is that can just check whether the largest number is greater than the second largest number, if so, then it sure greater than others for two times. Then just one pass the num instead of two pass.

五 
  1 Image Overlap：O(N^4)
    Idea is that we check:
    Move the second image around starting from the bottom right corner to the top left hand corner
    For each move, see whats the overlap
    Return the highest value
    
