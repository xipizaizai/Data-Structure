1. Queue Reconstruction by Height: O(nlogn)
    This question is trick, first because the queue is sorted by the height, then first sort all the array in height decending order, which is higher people will be in the front of queue, if the height is the same, then sort the # of people in ascending order.
    Because rest of the array, people are shorter, then need resort the array based on the second index of each tuple.
    
2. Split Array into Consecutive Subsequences:O(n)
    Idea is that using two maps to record first is frequency of each element, second is the count of the head element of a new chain.
    when linear scan through the input array, if the frequency of the element is not zero, then see whether it is the element the chain needed, if so then update the head to the element+1, else see whether in the frequency map, there exist element+1 and element+2 which can become a new chain
            if (freq.get(i) == 0) continue;
            else if (appendfreq.getOrDefault(i,0) > 0) {
                appendfreq.put(i, appendfreq.get(i) - 1);
                appendfreq.put(i+1, appendfreq.getOrDefault(i+1,0) + 1);
            }   
            else if (freq.getOrDefault(i+1,0) > 0 && freq.getOrDefault(i+2,0) > 0) {
                freq.put(i+1, freq.get(i+1) - 1);
                freq.put(i+2, freq.get(i+2) - 1);
                appendfreq.put(i+3, appendfreq.getOrDefault(i+3,0) + 1);
            }
            else 
                return false;
            freq.put(i, freq.get(i) - 1);
3. 
