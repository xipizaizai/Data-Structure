1. Binary Tree Level Order Traversal:
          classic topic of BFS: use a queue to maintain a structure. 
          for each level, get a size of that level and poll node out, add in level list
          add each node's left and node's right into the queue for later poll out
2. Binary Tree Zigzag Level Order Traversal:
          
          the only difference from Q1 is that using the property of list.add(int index, int num) which
          can make the num in the first position of this list
          
3. Minimum Depth of Binary Tree:
          use BFS to search level order, when you meet a node has no left and right child, return the level
          or add their child to the queue and increment the level

4. Binary Tree Level Order Traversal II:
          level order traversal and reverse it

5. Course Schedule:
          create a graph and a degree array which represent the level in the graph
          Queue offer the node from the leaf node (degree==0)
          then check the graph to see their neighbor whether there is degree==1, add to the queue
          
6. Binary Tree Right Side View:
          level order traverse and every time add node right first, then you can make sure everytime, you
          will first poll out the rightmost node of each level.
          Add rightmost node into the list everytime you traverse a level

7. Word Ladder:
          using BFS,two queues to process, first is current string, second is current distance.
          use hashset to record dictionary
          corner case:
                     1. dictionary has no word
                     2. endWord is not in dictionary
          queue poll a string, 
          if this mathces endWord, return cuurent distance.
          else
              change each index of this string with 26 character to check whether there is a match with dict.
          if matched, add it into queue and add dist+1 in queue, remove this string from dict
          
8. Clone Graph:
          use a queue and a map, map can map new node with old node! if deep copy then use map
          queue is for searching for its neighbors, if map not contains this node, first made this node and its clone node
          then map their neighbors to the new nodes
          
                               while(!queue.isEmpty()){
                                UndirectedGraphNode N = queue.poll();
                                for(UndirectedGraphNode nei:N.neighbors){
                                    if(!map.containsKey(nei)){
                                        map.put(nei,new UndirectedGraphNode(nei.label));
                                        queue.offer(nei);
                                    }
                                    map.get(N).neighbors.add(map.get(nei));
                                }
                            }
9.  Remove Invalid Parentheses:
             because have no idea which one bracket to remove, so we try to remove each one and put the new string
             into the queue to see if valid, the same as brute force
             if the string poll from queue is valid, then skip all the change part
             else
              try to remove each index to see
