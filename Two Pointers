1. Reverse Vowels of a String O(n)+O(1):
    idea is using two pointers, when met the vowel char, swap them and keep finding. use stack can make the search in O(1)time, and the space complexity is O(1) because of using two pointers.
    
2. Candy: O(n)
    idea is to find the minimum sum of candy, the better idea is to create two arrays fill with one. And linear scan input array and if neighbor is greater, then add one more
    you go from left to right and right to left- in total 2 pass and then for two arrays, each element will get the max one as the final output.
    
3. Minimum Size Subarray Sum:O(n)
    Idea is to use 2 pointers, sum the numbers from i to j until it is larger than sum, then i++ and sum-=nums[i], keep finding, after finding all the elements in the array, get the minimum one.

4. Substring with Concatenation of All Words:O(mn)
    Idea is to use sliding window, which has the length of words.length and use hashMap to see if the substrin contains all the element in the wordlist. if yes then add the index into the result.
    Remind of copy of hashmap because every time need to check whether new substring contains.
    
5. Minimum Window Substring:O(n)
    The idea is the same with minimum size subarray sum, use two pointers, first have a map to record all the words need to be contained, then move fast pointer when all the words are contained, move slow until not all the words contained, update the minimum length. then keep moving fast to find the next state when all words contained.

6. Backspace String Compare:O(n)+O(1)
    The idea is that using two pointers to firstly check that how many '#'has from the end of the string to the front, then when you meet a char, if there are '#' available, then you can skip that char, or you have to see whether the char in S is the same as the char in T

7. Backspace String Compare :O(n)
    Idea is that keep moving pointers from the end of the string, and find the next possible char in the string, when occur a '#', then increase the skip, when occur a char, then decrease a skip. if no skip left, then break
    when two pointers are break,there maybe two char, check whether they are the same, or maybe one is finished

8.Longest Word in Dictionary through Deleting:O(nk)
    Idea is to use two pointer, find whether the word in dictionary is the subsequence of the stirng s, if it is, check whether it is the right order one. without sorting.
    Here is the idea how to lexicographical order the two string:
        str.compareTo(max_str) < 0 means str is smaller lexicographical order!

9. Expressive Wordsï¼šO(string.length()*word.length)
    Idea is use two pointers, check whether it can satisfy the two situations: 
                    1. they are exactly same
                    2. in S there are at least 3 same word in each group which
                if (i >= 2 && S.charAt(i) == S.charAt(i - 1) && S.charAt(i - 1) == S.charAt(i - 2));
                if (i > 0 && i < n - 1 && S.charAt(i - 1) == S.charAt(i) && S.charAt(i) == S.charAt(i + 1));
10.Longest Mountain in Array:O(n) with constant space
    Idea is use two pointers, left pointer is used for finding left boundary and right pointer is used for finding the end of the mountain. so much have up-peak-down this pattern. if not then max length is not changed still 0. then the left pointer will be the maximum of end or start+1.
    Start+1 is used for those [2,2,2], no mountain arrays.
    

    
