1. Binary Tree Inorder Traversal:
      Can solve using recursion and iterative,iterative way is to use stack, keep adding the left node and pop a node and it's right node into the stack.
      recursion:
      recursively start with processing node.left, add root.val into list, and processing node.right;
      
2. Convert Sorted Array to BST:
      BST has property of left child <root<right child. So find the medium element to be the root and recursion left and right child

3. Convert Sorted LinkeList to BST:
      Same idea with above question, but how to find the medium node in LinkedList? use fast and slow pointer to get medium by fast = fast.next.next; slow = slow.next;
      then the slow pointer is the medium node, and use this method recursively.

4. Serialize and Deserialize BST: 
      This question is typical, using queue data structure to store nodes and get nodes in level order traverse.
      for Serialize, then using level order traverse. remember if child is null, add null into the stringBuilder
      for deserialize,add nodes in the queue in level order, for each level ,use another queue to store the element's children and then make the first queue each time equal to this second queue

5. Binary Search Tree Iterator:
      pop nodes in ascending order: So we need a methon called pushAllNode(TreeNode root). push all the left child into the stack, everytime when check the next node, then pop it out and push all of its right child into the stack
      
6. Binary Tree Maximum Path Sum:
      path sum from anynode to anynode:
      what is returned in each recursion: Math.max(left,right)+node.val
      finally, the last node will be left(maximum)+node.val+right(maximum)
      Trick part: maybe has negative node value, so each time:
                  int left = Math.max(0,helper(root.left));
                  int right = Math.max(0,helper(root.right));
7. Subtree of Another Tree:
      the idea of this question is to recursively checking that whether the subtree of s is equal to t. So a helper function is needed. helper function is to check whether from that node of the treet to the rest is the same of the two tree.
      For main function, just recursively check the to find whether the subtree is exist.
      Or you can do it iteratively, use a queue to store all the root into the queue and check if any node can be the same root with the substree t.
Worst case:O(mn)

8. Two Sum IV - Input is a BST: O(n)
      the idea is that: BST has properties that inorder is a sorted array.
      So first, using inorder traverse,get the inorder list of element and find the sum using two pointers.

9. Diameter of Binary Tree:O(n)
      the idea is that get the maximum left child length and maximum right child length
      so for helper fuction, return the maxmum of (left,right)+1 to the parent node.
      then the final result is the maximum through all child.
10.Count Complete Tree Nodes:O((logn)^2)
      A fully completed tree has node number: count = 2 ^ depth - 1
Compare left height and right height, if equal, use the formular, otherwise recurvisely search left and right at next level
The search pattern is very similar to binary search, the difference of heights ethier exsits in left side, or right side
Due to the reason stated in point 3, the time complexity is h ^ 2, there is h times for each level, and h times for calculating height at each level

11.Split BST:O(logn)
      Idea is that we use recursion, each time we split the root.left or root.right, then we can know which part we can merge with the root part,do it recursively until we find the target
      https://leetcode.com/problems/split-bst/solution/

12.Maximum Width of Binary Tree:O(# of nodes)
      Idea can be DFS or BFS.
            result = Math.max(result, "last-node-idx"-"first-node-idx"+1);
            root's idx = i
            root.left's idx = 2*i
            root.right's idx = 2*i+1
      https://leetcode.com/problems/maximum-width-of-binary-tree/description/

13. Smallest Subtree with all the Deepest Nodes:O(n)
      Idea is the same with the find the deepest depth of a binary tree, then each level, we can have larget depth between left child or right child. Then go to the larger depth side, when equal then root is the return node,whenever not equal, then recursively goes to the deepest side.

14. Inorder Successor in BST:O(Height of tree)
      The idea is to compare root's value with p's value if root is not null, and consider the following two cases:
      1. root.val > p.val. 
      In this case, root can be a possible answer, so we store the root node first and call it res. However, we don't know if there is anymore node on root's left that is larger than p.val. So we move root to its left and check again.

      2. root.val <= p.val. 
      In this case, root cannot be p's inorder successor, neither can root's left child. So we only need to consider root's right child, thus we move root to its right and check again.
      We continuously move root until exhausted. To this point, we only need to return the res in case 1.

15. Find Leaves of Binary Tree:O(# of nodes)
      The idea is that everytime: start from the root, find all the leaves from this root and remove them(which is made it null). keep doing this step until the root become null.


      
      
