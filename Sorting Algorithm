1. Quick Sort:

                                      Worst case performance	O(n^2)
                                      Best case performance	 Ω(n log n)
                                      Average case performance	O(n log n)

Quicksort is a divide and conquer algorithm. Quicksort first divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays.

The steps are:

1. Pick an element, called a pivot, from the array.
2. Partitioning: reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation.
3. Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.

2. Merge Sort:
                                      Worst case performance	O(n log n)
                                      Best case performance	Ω(n log n)
                                      Average case performance	Θ(n log n)
                                      
Conceptually, a merge sort works as follows:

1. Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).
2. Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list.

3. Bubble Sort:
                                        Worst case performance	O(n^2)
                                        Best case performance	Ω(n)
                                        Average case performance	O(n^2)
                                        
A Bubble Sort is a sorting algorithm that compares two adjacent data at a time and swaps them if they are in the incorrect order. It runs through the list of data to be sorted until there are no more swaps that need to be done. It is a very slow yet simple algorithm.


4. Insertion Sort:
                                        Worst case performance	О(n^2)
                                        Best case performance	Ω(n)
                                        Average case performance	О(n^2)
Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.

5. Selection Sort:
                                        Worst case performance	О(n^2)
                                        Best case performance	Ω(n^2)
                                        Average case performance	Θ(n^2) 
The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.
