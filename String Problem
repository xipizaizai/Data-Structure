一： Palindrome questions:
    1. Valid Palindrome:
        Basic idea of checking Palindrome is to have two pointers pointing start and end of the string, 
        while(start<end), if not equal then is not valid.
        For this one, the string has not only chacters, so use s.toLowerCase().replaceAll("[^a-z0-9]", "");
        which is the method of changing all the character except a-z 0-9
    
    2. Valid Palindrome II:
        Basic idea also has to check whether it is a palindrome, but for this question, you can delete one character at most,
        So you can have to pointers also to check equality and when it is not equal, then check:
                              isPalindrome(s,l,r-1) || isPalindrome(s,l+1,r)
        Only cost O(N)time and O(1)space.
        
    3. Find the closest Palindrome:
        given the number in string formatted,find the closest integer (not including itself), which is a palindrome.
        Basic idea:
        The cloest one either in larger half or smaller half, so we divide it into two parts
        
二：Dynamic Programming in String:
    1. Word Break:
        return the boolean type,find whether string can be separated by the words in dictionary.
        boolean DP to see that each index whether is true then means the substring before that index is found in dict.
        if(dp[j]==true && substring(j,i) in dict) then dp[i]=true!!
   
    2. Word Break II:
         Using Word Break I to check whether the string can be separated.
         And using DFS BACKTRACK to see all the combination of the result
三：Valid Parentheses:
    1. Basic valid parentheses:
        using stack to store the opposite char and check

String problem:

1. Reverse Words in a String:
    take care of leading blank spaces and using s.trim().split("\\s+")
        
2. Longest Common Prefix:O(m*m*n)
    First sort the array of string, make the perfix in order, then check the first one with the last one,check in worst case of (length of fist string)time.
    use the API of string.indexOf(string) which will return the first index that appear string in origin string, else return -1
    if return of that is not 0 then induct the prefix length by one.
    The time complexity of it is first sort cost nlogn+m*indexOf cost O(m*n)= O(m*m*n)
        
3. Longest Absolute File Path:O(n)
    use of string.split() && string.replaceAll(), using stack to get upper level's length
    update the max length each time 
        
4.  Repeated String Match:O(N*(M+N))
    Idea is to create a new string which contains length of (B.LENGTH/A.LENGTH * A.length) string. and then check whether this contains B,if not then add one more A to the string to check. then it is count=1 count<B.length/A.length+2;count++
        
5. Sentence Screen Fitting:O(N)
    Idea is really tricky, because the problem is need us to fit all the sentence into the screen without split a word.So if the start point of a row is in the middle of a word(not the space), then we need to backward the start point to the place where the space before that is a space.
                                 if (s.charAt(start % l) == ' ') {
                                        start++;
                                    } else {
                                        while (start > 0 && s.charAt((start-1) % l) != ' ') {
                                            start--;
                                        }
                                    }

    
