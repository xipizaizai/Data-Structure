1. Valid Tic-Tac-Toe State: O(n)
      the idea is to check whether it is a valid state: 
        three rules applied:
          1. # of 'X' is always one more than # of 'O'
          2. when rol or col or diagonal or antidiagonal reaches three, then one of palyer has win
          3. if X is win, then turn==1 || O wins, then turn = 0

2.  Valid Square:
      idea is to use the property of a square, diagonal length = sqrt(2)*side.

3. Union Find problem:

      3.1 Redundant Connection(undirected graph):
            Using Union find, build a parent array which initialize them in -1. Then use find method, if they are the same ,then cycle find. else parent[find(x)]=find(y)
                                    int u = find(sets, edge[0]);
                                    int v = find(sets, edge[1]);  
                                    if(u == v) // cycle find
                                        return edge;
                                    sets[u] = v;
            Find method:
                  public int find(int[] sets, int v) {
                        return sets[v] == 0 ? v : find(sets, sets[v]);
                  }
      3.2 Redundant Connection II(directed graph):
            Using union find, there may be two situations: 1. cycle issue. 2. have two parent issue
            to find 1:
                  use union find, if they have same answer, then cycle find, then record the edge which cause cycle
            to find 2:
                  if no cycle find, but if find()!=itself, then means it have other parent, it maybe cause multiple parents issue. record the edge(which is its parent)
            If those two issue only occur one, then return that one,
            If both of them are occur, then return the multiple parents one(should be the first edge which results in "multiple parents" issue)
      
4. Is Graph Bipartite?O(n)
      graph bipartite means  if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.
      Then we use color method, we want to color nodes into two colors: red(1) blue(-1) when initialized, all are 0
      Using BFS, to find whether two adjacent nodes are in the same color, then false
      else true;
      
5. Find Eventual Safe States:O(V+E)    
      graph which is the same as find cycle, if start with this node and will lead to a circle, then this node is not safe.
      for DFS part, we need some optimization, use color array to denote three status: unvisited, safe, unsafe
      When we travel a path,we mark the node with 2 which represents having been visited,and when we encounter a node which results in a cycle,we return false,all node in the path stays 2 and it represents unsafe.
      And in the following traveling,whenever we encounter a node which points to a node marked with 2,we know it will results in a cycle,so we can stop traveling.
      On the contrary,when a node is safe,we can mark it with 1 and whenever we encounter a safe node,we know it will not results in a cycle.
      
                              public boolean helper(int[][]graph, int i, int[]status){
                                if(status[i]!=0) 
                                    return status[i]==1;
                                status[i]=2;
                                for(int adj:graph[i]){
                                    if(!helper(graph,adj,status)) return false;
                                }
                                status[i]=1;
                                return true;
                            }
