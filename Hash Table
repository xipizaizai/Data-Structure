1. Two sum:
        find two elements that sum is target
        use hashmap to search for target-nums[i], if not exist, store nums[i],else found it
        Time complexity: O(N)
2. word pattern:
        use the "map.put": which will return the previous value associated with key, 
        or null if there was no mapping for key
3. How many index till you get a higher element:
        Use a stack can easily fulfill, when occur a higher number, you can pop all the index which is
        smaller than the current number.
4. Top K frequent element:
        matter of frequency, you can use hashmap to get the frequency
        Top n == sort by frequency-> use comparator -> Collections.sort(list,comparator)
5. Goup string together:
        Sort them to see if they meet specific pattern
        Time Complexity of Sorting is O(NlogN)
6.Longest substring without repeated character:
        use hash set to record the longest substring from i to j
        if repeated occur, remove charAt(i) i++ j not change continue searching
        Time complexity is O(n)
        Space Complexity is O(set.size())
7. 4Sum(return # of pairs):
        using HashMap to store sum of 2 lists, and for the other 2 lists, check if map.contains(target-sum)
        Time Complexity:O(n^2)
8. Subarray Sum Equal K:
        Subarray can use prifix sum array, find (sum-target)
        trick is you need to add 0 into map which has count=1
9. Maximum Size Subarray Sum Equals k:
        which is follow up of the question above, remember to use presum, and if sum is not contained, store the sum into map,but if sum is already exist in the map, do not update the sum because it maybe larger than now.
        
10. First Unique Character in a String:O(n)
        use int array with 256 size which can contains more characters, and two passes of array. Find the character with frequency 1
        
11. Remove Duplicate Letters: O(n)
        Idea is to find the smaller lexiorder character but need to meet the need of still have previous letters in rest of the array. So when we want to maintain a structure which can peek previous chacters, we need stack! 
        use visited boolean array to skip already visited char and use int[]count = new int[256] to record the frequency of the char: to see that there still have chars in the rest of the array so that we can pop it out.
        then use stringbuilder to append all the chars in the stack.
12.Min stack: each operation is O(1)
        idea is to get min of the whole stack, so that using only one stack and record the min value using a integer, each time you found a smaller one than min, update min and push min into stack then push element into stack. when pop the thing out,if the element on top is min, then after pop it, you should update min value with the value beneath it and then pop it.
        
13. Longest Consecutive Sequence:O(n)
       First turn the input into a set of numbers. That takes O(n) and then we can ask in O(1) whether we have a certain number.Then go through the numbers. If the number x is the start of a streak (i.e., x-1 is not in the set), then test y = x+1, x+2, x+3, ... and stop at the first number y not in the set. The length of the streak is then simply y-x and we update our global best with that. Since we check each streak only once, this is overall O(n).
        
14. Evaluate Reverse Polish Notation O(n):
        Idea is to use a stack to record item until find a opertor, then pop out the first two element to do the operation, then push them into the stack.

15. Basic Calculator:O(n)
        idea is the same with 14, then use a stack to record the number in the parenthesis, others just use operator to calculate the result.
        do not forget the last number which is need be added to the result so far.
        
16.Flatten Nested List Iterator:O(n)
        Idea is we push all the nestedList into the stack from back to front, so when we pop the stack, it returns the very first element. Second, in the hasNext() function, we peek the first element in stack currently, and if it is an Integer, we will return true and pop the element. If it is a list, we will further flatten it. 

17.132 Pattern:O(n)
        Idea is to use a stack to track the min and max, when find a number which is greater than last min and smaller than last max. using stack make true the order of the i,j and k. 

18. Daily Temperatures:O(n)
        The idea is to find the first element which is greater than the element. Then wen can use a stack to track, when the element is not greater than the element on the top of the stack, then keep adding into the stack. If greater, then pop the element which is smaller than right now until stack is empty. Then get the distance 


18. Exam Room:seat:O(logn) leave:O(n)
        Idea is use a priorityqueue(maxheap) to track the max distance interval each time when seat a person.insert the person into the middle of the interval.
        when leave, find the two interval this person in and merge into a larger interval, push back to the heap.
        
19.Hand of Straights:O(nlogn)
        Idea is to use treeMap, which can order the map by the key. Then start with the keyset, find whether there are enough consecutive card left, if so, cut off # of start cards for rest of the consecutive cards.

20.Contiguous Arrayï¼šO(n)
        Idea is the same as store the presum of the array, store the difference between number of zeros and ones
        next time when meet another same difference then update the length

21.Palindrome Pairs:O(length_of_longest_word^2 * words.length)
        Idea is use hashMap to store the word's index. There are four cases:
        case 1: words contains "", then it can be pair with palindromes in words
        case 2: palindrome pairs which is reverse of another
        case 3 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)
        case 4 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)
22.Decode String:O(n)
        There are two situations in this kind of questions:
                1. number is in the head of chars
                2. number is at the end of chars
        for 1:
                need two stacks to maintain this question, one for numbers, one for strings
                each time when occur '(' or '[': then push "" into the stack
                when occur ')' or ']' then means need to multiply the chars
        for 2:
                need only one stack is fine:
                when meet '(', push "" into the stack
                when meet '}', which denotes that the number is known, then multiply it.
         For the number part, use string to store will be more easy because no need to multiply 10, just use Interger.parseInt(num) then can get the correct number.

23. Fruit Into Baskets:O(n)
        Idea is to use a hashMap and track the size of the map, the problem is the same as finding the longest length with two distinct number.
        moving the right pointer when the size is not greater than 2, then move the left pointer if the size is greater than 2

24. Bulls and Cows:O(n)
        use int map to store their frequency based on their index, when find two char equal, then bull++
        else if find map[secret[i]]>0 then denotes that guess has this number then cow++ then map[secret[i]]--
        else if find map[guess[i]]<0 then demotes that secret has this number then cow++;then map[secret[i]]++

25.Fraction to Recurring Decimal:
        Idea is to use a hashmap to store the num for current and to see whether there is already exist in map->recuring found. The map is storing the value with the index where to put the parenthesis into. then when you find that num for current is 0 then means it is divisible, otherwise, it is not, then find the recurring index and add parenthesis to the stringBuilder.
        
26. Sentence Similarity:O(n)
        Idea is to use a hashMap: key is the string, value is a set of strings which similiar with the key.
        After storing all this pairs, just check when two string is not equal, then check whether there are appear in the map.

27. Exclusive Time of Functions:O(N)
        Idea is to use the stack to store the int[]{id,time}, when occur a start, just push it into the stack, everytime when occur a end, calculate the time and update the time of that idx: res[idx]+=time, if the stack is not empty, then update the time of that stack.peek() index: res[stack.peek()[0]]-=time

28. Unique Word Abbreviation:O(N)
        Idea is to use a hashmap which for key is the abbreviated string and the value is a set of original strings. If the map contains the abbreviate string then most of them are false, but only one situation is that the original string is the same with value in map and only have this one in the set. then it is true.
             if(map.containsKey(Abbr(word)) && map.get(Abbr(word)).contains(word) && map.get(Abbr(word)).size()==1) 
                                return true;
            
        
