1. Find Peak index in mountain array:
         if mid element is the peak, then return;
         else:
            1. mid is on the uphill-> start = mid+1
            2. mid is on the downhill-> end = mid-1
2. Two sum II(input array is sorted):
        if num[start]+num[end]==target return;
        else
              start++ or end--
        Pay attention to while(start+1<end)
        This will result in a final situation like: 
                1,    2,   3
              start  end
        You need to check the last situation like this to see if this is the result
3. Find the 1st and last position of a target:
   Find 1st:
       if(nums[mid]==target || nums[mid]>target)
                end=mid;
            else
                start=mid;
        }
        if(nums[start]==target)
            return start;
        else if(nums[end]==target)
            return end;
        else 
            return -1;
            
   Find Last:
        if(nums[mid]==target || nums[mid]<target)
                start=mid;
            else
                end=mid;
        }
        if(nums[end]==target)
            return end;
          else if(nums[start]==target)
            return start;
         else
             return -1;
4. Search in rotated sorted array:
        there will be two parts where mid can be:
        
        larger half:
                 nums[mid]>=nums[start];
                 if(nums[mid]>target && target>=nums[start]) end = mid-1
                 else 
                 start = mid+1
        smaller half:
                 nums[mid]<=nums[end];
                 if(nums[mid]<target && target<=nums[end]) start = mid+1
                 else
                 end = mid-1;
        lastly, check start and end index!
 5. Find minimum in Rotated sorted array:
        there will be two possibilities:
            1. the array is original order:
            which is nums[start] < nums[end]  then return nums[start];
            
            2. the array is rotate:
            which has two parts:
                  check nums[mid], if nums[mid]>start, then it is in larget part, then the minimum must in the other part
                  -> start = mid;
                  else 
                     end = mid;
                  also check the last start and end index~ get a min one
 6. Search a 2D matrix:
         only row is sorted in ascending order,so the whole matrix is a ascending array which makes it a 2D matrix
         do it as an ordinary binary search
         trick: 
                 start & end pointer is the index, but you need to put it in the matrix[start/col_num][start%col_num]
 7. Search a 2D matrix II:
         both row and column are in ascending order.
         trick: start with right-upper element, if target is larger, then move down
         else move left
         Time complexity is O(m+n)
         
 Math problem:
 ***** change it into long *****
 
 1. Pow(x,n):
         implement the function of Pow, using recursion, each time deal with whether n==0 or n<0
         if n==0 then return 1;
         if n<0 then change x into 1/x; n change to -n
 2. divide two integer:
         using recursion
         take care of the sign fist: if both is positive or both is negative: no need to change
         take care of all corner case of divisor:
                  if divisor < 0 change it to positive
                  if dividen < divisor return 0                                              
Hard Question:

1. Median of Two Sorted Arrays: O(log(m+n))
         the idea is to find median of two sorted array, using binary search, each time compare A[mid] and B[mid]. If A>B, then we know that the median is at the right side of A[mid] and left side of B[mid], other way also.
         Then each time remove k/2 length of searching area.
